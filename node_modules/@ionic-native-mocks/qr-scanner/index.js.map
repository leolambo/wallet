{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/qr-scanner/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { QRScanner } from '@ionic-native/qr-scanner';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport interface QRScannerStatus {\n    /**\n     * On iOS and Android 6.0+, camera access is granted at runtime by the user (by clicking \"Allow\" at the dialog).\n     * The authorized property is a boolean value which is true only when the user has allowed camera access to your app (AVAuthorizationStatus.Authorized).\n     * On platforms with permissions granted at install (Android pre-6.0, Windows Phone) this property is always true.\n     */\n    authorized: boolean;\n    /**\n     * A boolean value which is true if the user permanently denied camera access to the app (AVAuthorizationStatus.Denied).\n     * Once denied, camera access can only be gained by requesting the user change their decision (consider offering a link to the setting via openSettings()).\n     */\n    denied: boolean;\n    /**\n     * A boolean value which is true if the user is unable to grant permissions due to parental controls, organization security configuration profiles, or similar reasons.\n     */\n    restricted: boolean;\n    /**\n     * A boolean value which is true if QRScanner is prepared to capture video and render it to the view.\n     */\n    prepared: boolean;\n    /**\n     * A boolean value which is true when the preview layer is visible (and on all platforms but browser, the native webview background is transparent).\n     */\n    showing: boolean;\n    /**\n     * A boolean value which is true if QRScanner is actively scanning for a QR code.\n     */\n    scanning: boolean;\n    /**\n     * A boolean value which is true if QRScanner is displaying a live preview from the device's camera. Set to false when the preview is paused.\n     */\n    previewing: boolean;\n    /**\n     * A boolean value which is true if the light is enabled.\n     */\n    lightEnabled: boolean;\n    /**\n     * A boolean value which is true only if the users' operating system is able to QRScanner.openSettings().\n     */\n    canOpenSettings: boolean;\n    /**\n     * A boolean value which is true only if the users' device can enable a light in the direction of the currentCamera.\n     */\n    canEnableLight: boolean;\n    /**\n     * A boolean value which is true only if the current device \"should\" have a front camera.\n     * The camera may still not be capturable, which would emit error code 3, 4, or 5 when the switch is attempted.\n     * (On the browser platform, this value is false until the prepare method is called.)\n     */\n    canChangeCamera: boolean;\n    /**\n     * A number representing the index of the currentCamera. 0 is the back camera, 1 is the front.\n     */\n    currentCamera: number;\n}\n\nexport class QRScannerMock extends QRScanner {\n    /**\n     * Request permission to use QR scanner.\n     * @return {Promise<QRScannerStatus>}\n     */\n    prepare(): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Call this method to enable scanning. You must then call the `show` method to make the camera preview visible.\n     * @return {Observable<string>} returns an Observable that emits the scanned text. Unsubscribe from the observable to stop scanning.\n     */\n    scan(): Observable<string> {\n        let response: string;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     * Configures the native webview to have a transparent background, then sets the background of the <body> and <html> DOM elements to transparent, allowing the webview to re-render with the transparent background.\n     * @returns {Promise<QRScannerStatus>}\n     */\n    show(): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Configures the native webview to be opaque with a white background, covering the video preview.\n     * @returns {Promise<QRScannerStatus>}\n     */\n    hide(): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Enable the device's light (for scanning in low-light environments).\n     * @returns {Promise<QRScannerStatus>}\n     */\n    enableLight(): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Disable the device's light.\n     * @return {Promise<QRScannerStatus>}\n     */\n    disableLight(): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Use front camera\n     * @return {Promise<QRScannerStatus>}\n     */\n    useFrontCamera(): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Use back camera\n     * @return {Promise<QRScannerStatus>}\n     */\n    useBackCamera(): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Set camera to be used.\n     * @param camera {number} Provide `0` for back camera, and `1` for front camera.\n     * @return {Promise<QRScannerStatus>}\n     */\n    useCamera(camera: number): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Pauses the video preview on the current frame and pauses scanning.\n     * @return {Promise<QRScannerStatus>}\n     */\n    pausePreview(): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Resumse the video preview and resumes scanning.\n     * @return {Promise<QRScannerStatus>}\n     */\n    resumePreview(): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Returns permission status\n     * @return {Promise<QRScannerStatus>}\n     */\n    getStatus(): Promise<QRScannerStatus> {\n        let response: QRScannerStatus;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Opens settings to edit app permissions.\n     */\n    openSettings(): void {};\n}\n"]}